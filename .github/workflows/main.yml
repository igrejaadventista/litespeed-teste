name: Deploy em Produção

on:
  push:
    branches: ["master"]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: litespeed-teste
  ECS_SERVICE: litespeed-server
  ECS_CLUSTER: producao
  CONTAINER_NAME: litespeed
  ECS_TASK_DEFINITION: litespeed-server

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: develop

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Verificando o cache dos pacotes do Composer
        uses: actions/cache@v2
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Executando composer install para dependências do Wordpress\
        uses: php-actions/composer@v5
        with:
          php_version: 7.4
          version: 1
          dev: no
          args: -o --ignore-platform-reqs -d ./public

      - name: Setup do NodeJS para o tema
        uses: actions/setup-node@v2
        with:
          node-version: "14.21.1"

      - name: Executando yarn install
        working-directory: ./public/wp-content/themes/revistaoeste
        run: npm install

      - name: Executando a construção dos assets
        working-directory: ./public/wp-content/themes/revistaoeste
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }}  --query taskDefinition  >  task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false
